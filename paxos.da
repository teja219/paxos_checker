import sys
import time
from random import randint, sample

WINDOW = 5   # num of slots for proposals ahead, for reconfig
TIMEOUT = 1  # num of seconds before a preempted leader starts next round
NOPS = 8     # num of different operations that the state machine can do
def apply(op, state): return (state+[op.id], ['result',op.id,'on',state])
def is_reconfig(op): return hasattr(op, 'leaders')

class Silent(process):
    self.silent = False

    def receive(msg=('mute',serial),from_=p):
      self.silent = True
    
    def receive(msg = ('un_mute',serial),from_=p):
      self.silent = False
    
    def setup():
      self.silent = False
      pass

    def run():
      pass
    
    def send(m,to):
      if not self.silent:
        super().send(m,to)
    
class Replica(process, Silent):
  def setup(leaders, state):
    super().setup()
    self.slot_in, self.slot_out = 1, 1  # slot to send prop, slot to apply dec

  def run():
    while True:
      output('### replica')
      if await(slot_in < slot_out + WINDOW and
               some(received(('request', c)), has=
                    each(sent(('propose', s, _c)), has=
                         some(received(('decision', _s, c2)), has= c2!=c)))):
        output('### replica 1 request:', 'c', c, 'slot_in', slot_in)
        if some(received(('decision', slot_in - WINDOW, (_,_,op))), has=
                is_reconfig(op)):
          output('### replica 1.1 reconfig:', 'old', leaders, 'new', op.leaders)
          leaders = op.leaders
        if not some(received(('decision', _slot_in, _))):
          send(('propose', slot_in, c), to= leaders)
          output('### replica 1.2 propose:', slot_in, c, leaders)
        slot_in = slot_in + 1

      elif some(received(('decision', _slot_out, c))):
        output('### replica 2 decison:', 'slot_out', slot_out, 'c', c)
        client, cmd_id, op = c
        if not some(received(('decision', s, _c)), has= s < slot_out):
          state, result = apply(op, state)
          send(('response', cmd_id, result), to= client)
          output('### replica 2.1 applied:', 'state', state, 'result', result)
        slot_out = slot_out + 1

class Leader(process, Silent):
  def setup(acceptors, replicas):
      super().setup()
      self.ballot = (0, self)  # ballot number

  def run():
    while True:
      output('### leader')
      send(('1a', ballot), to= acceptors)
      if await(len(setof(a, received(('1b', _ballot, _), from_= a)))
               > len(acceptors)/2):
        output('### leader 1 leader:', 'ballot', ballot)
        
        for (s,c) in pmax(setof(t, received(('1b', _ballot, accepted)),
                                t in accepted)):
          send(('2a', ballot, s, c), to= acceptors)

        while True:
          if await(some(received(('propose', s, c)), has=
                        not some(sent(('2a', _ballot, _s, _))))):
            output('### leader 1.1 propose:', 's', s, 'c', c)
            send(('2a', ballot, s, c), to= acceptors)

          elif some(received(('2b', _ballot, s, c)), has=
                    len(setof(a, received(('2b', _ballot, _s, _c), from_= a)))
                    > len(acceptors)/2 and
                    not sent(('decision', s, c))):  # garbage collect leader?
            output('### leader 1.2 decision:', 's', s, 'c', c)
            send(('decision', s, c,), to= replicas)

          elif some(received(('preempt',(r2, leader2))), has=
	       	    (r2, leader2) > ballot):
            output('### leader 1.3 preempt:', 'r2', r2, 'leader2', leader2)
            break

      elif some(received(('preempt',(r2, leader2))), has=
	       	(r2, leader2) > ballot):
        output('### leader 1.4 preempt:', 'r2', r2, 'leader2', leader2)
        pass

      while each(sent(('ping',_r2,t), to= _leader2), has=   # failure detection
                 received(('pong',r2,t), from_= leader2)):  #
        send(('ping', r2, logical_clock()), to= leader2)    #
        time.sleep(TIMEOUT)                                 #

      ballot = (r2+1, self)

  def receive(msg=('ping', r2, t), from_= leader2):         # for 
    send(('pong', r2, t), to= leader2)                      # failure detection

  def pmax(pvals):
    return setof((s,c), (b,s,c) in pvals, b == max(setof(b, (b,_s,_) in pvals)))

class Acceptor(process,Silent):
  def run(): await(False)
  
  def setup():
    super().setup()

  def receive(msg=('1a', b), from_= leader):
    output('###', 'received 1a: b', b)
    if each(sent(('1b', b2, _)), has= b > b2):
##    accepted = setof((b,s,c), sent(('2b',b,s,c)))
      accepted = setof((b,s,c), sent(('2b',b,s,c)),     # w/state reduction
                        b == max(setof(b, sent(('2b',b,_s,_)))))
      output('###', 'accepted', accepted)
      send(('1b', b, accepted), to= leader)

  def receive(msg=('2a', b, s, c), from_= leader):
    output('###', 'received 2a: b s c', b, s, c)
    if not some(sent(('1b', b2, _)), has= b2 > b):
      send(('2b', b, s, c), to= leader)

  def receive(msg=m, from_= leader):
    if m[0]=='1a' or m[0]=='2a':
        max_b = max(setof(b, received(('1a',b)))| setof(b, received(('2a',b,_,_))))
        output('###', 'm', m, 'max_b', max_b,)

        if m[1] < max_b: send(('preempt', max_b), to= leader)

class Op(object):
  def __hash__(self): return self.id
  def __str__(self): return str(self.__dict__)
  def __eq__(self, other): return self.__dict__ == other.__dict__

class Client(process):
  def setup(replicas, nrequests, all_leaders):
    self.cmd_id = 0        # command id
    self.results = dict()  # map of command id to result of command

  def run():
    for i in range(nrequests):
      op = Op(); op.id = randint(0, NOPS-1)
#     if op.id == 0: op.leaders = sample(all_leaders, len(all_leaders)//2)
      output('### client 1 request:', 'cmd_id', cmd_id, 'op', op)
      send(('request', (self, cmd_id, op)), to= replicas)
      await(cmd_id in results)
      output('### client 1.1 received result:', cmd_id, results[cmd_id])
      cmd_id = cmd_id + 1
    output('---- terminating')

  def receive(msg= ('response', cmd_id, result)):
    output('### client 2 response:', 'cmd_id', cmd_id, 'result', result)
    if cmd_id not in results:
      results[cmd_id] = result
    elif results[cmd_id] != result:
      output('==== different result', cmd_id, result, 'than', results[cmd_id])
      raise RuntimeError('Desynced!!!!')

def main():
  nreplicas = int(sys.argv[1]) if len(sys.argv) > 1 else 2
  nacceptors = int(sys.argv[2]) if len(sys.argv) > 2 else 3
  nleaders = int(sys.argv[3]) if len(sys.argv) > 3 else 2
  nclients = int(sys.argv[4]) if len(sys.argv) > 4 else 1
  nrequests = int(sys.argv[5]) if len(sys.argv) > 5 else 4

  replicas = new(Replica, num= nreplicas)
  acceptors = new(Acceptor, (), num= nacceptors)
  all_leaders = new(Leader, (acceptors, replicas), num= nleaders*2)
  leaders = sample(all_leaders, len(all_leaders)//2)
  state = []; setup(replicas, (leaders, state))
  clients = new(Client, (replicas, nrequests, all_leaders), num= nclients)

  start(replicas | acceptors)
  start(all_leaders)
  start(clients)

  time.sleep(10)
  end(clients)
  end(all_leaders)
  end(replicas | acceptors)
